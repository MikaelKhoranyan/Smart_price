, parsing as (
SELECT 
		wh.[Подразделение_ЕМИ] as Город
		,p_nom.ГрупповаяНоменклатураЕМИ as Позиция
	    ,AVG(Source_table.Средняя_цена) as Средняя_цена_парсинг -- считаем, что у нас все цены с учетом НДС
		,'Парсинг' as Источник

FROM (
		  -- хак для выбора конкурентов - должен быть всегда фиксированный 1й запрос, чтобы инструкция с union не оказалась сверху.  
		  SELECT КодНоменклатуры
			   , КодСклада
			   , 'Северсталь' AS Конкурент
			   , ЕИ
			   , CAST(AVG(Цена) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[Северсталь]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , ЕИ
			   , Источник
		  HAVING CAST(AVG(Цена) AS INT) > 0
	
		{% if '23met' in parsing.comp_list %}
		UNION ALL
		SELECT КодНоменклатуры
  			   , [23met].КодСклада
  			   ,  НазваниеДоп as Конкурент
  			   , ЕИ
  			   , IIF(CAST(AVG(Цена_1) AS INT) = 0, CAST(AVG(Цена_2) AS INT), CAST(AVG(Цена_1) AS INT))  AS Средняя_цена
  			   , Источник
			FROM [Prices].[Парсинг].[23met]
				 LEFT JOIN Prices.Парсинг.с_КонкурентыДетально ON с_КонкурентыДетально.FK_КодНазваниеКонк = [23met].КодКонкурента
				 LEFT JOIN Парсинг.с_СкладыКонкурентов							 AS war		  ON war.КодСклада = [23met].КодСклада
				 LEFT JOIN Парсинг.с_Регионы_конкурентов						 AS reg		  ON reg.Название = war.НазваниеСклада
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [23met].[КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , [23met].КодСклада
			   , [НазваниеДоп]
			   , ЕИ
			   , Источник
		 HAVING  IIF(CAST(AVG(Цена_1) AS INT) = 0, CAST(AVG(Цена_2) AS INT), CAST(AVG(Цена_1) AS INT))  > 0

		{% endif %}


		{% if 'МКС54' in parsing.comp_list %}
		UNION ALL
		  SELECT КодНоменклатуры
  			   , КодСклада
			   , 'МКС54' AS Конкурент
			   , 'т' AS ЕИ
			   , CAST(AVG(COALESCE(Цена_от_4_до_6_тн, Цена_от_2_до_4_тн, Цена_от_1_до_2_тн, NULL)) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[MKC54]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
  			   , КодСклада
			   , Источник
		  HAVING CAST(AVG(COALESCE(Цена_от_4_до_6_тн, Цена_от_2_до_4_тн, Цена_от_1_до_2_тн, NULL)) AS INT) IS NOT NULL




															
		{% endif %}
		 

	   {% if 'Aгрупп' in parsing.comp_list %}
	   UNION ALL
		 SELECT КодНоменклатуры
			   , КодСклада
			   , 'Aгрупп' AS Конкурент
			   , ЕИ
			   , CAST(AVG(Цена) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[Агрупп]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , ЕИ
			   , Источник
		 HAVING CAST(AVG(Цена) AS INT) > 0

														
		{% endif %}


	   {% if 'Демидов' in parsing.comp_list %}
	   UNION ALL
		  SELECT КодНоменклатуры
			   , КодСклада
			   , 'Демидов' AS Конкурент
			   , 'т'AS ЕИ
			   , CAST(AVG(Цена) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[Демидов]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , Источник
		 HAVING CAST(AVG(Цена) AS INT)>1000

															

		{% endif %}
		
	   {% if 'Металлоторг' in parsing.comp_list %}	
		UNION ALL	   
		  SELECT КодНоменклатуры
			   , КодСклада
			   , 'Металлоторг' AS Конкурент
			   , ЕИ
			   , CAST(AVG(COALESCE(Цена_от_15_т, Цена_5_15_т, Цена_1_5_т, NULL)) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[Металлоторг]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , ЕИ
			   , Источник
		  HAVING CAST(AVG(COALESCE(Цена_от_15_т, Цена_5_15_т, Цена_1_5_т, NULL)) AS INT) > 0

															
		{% endif %}
		
		
	   {% if 'Металлсервис' in parsing.comp_list %}
		UNION ALL	   
		
		  SELECT КодНоменклатуры
			   , КодСклада
			   , 'Металлсервис' AS Конкурент
			   , ЕИ
			   , CAST(AVG(COALESCE(Цена_2, Цена_1)) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[Металлсервис]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , ЕИ
			   , Источник
		 HAVING CAST(AVG(COALESCE(Цена_2, Цена_1)) AS INT) > 0

															
		{% endif %}
		
		
	   {% if 'НЛМК_Шоп' in parsing.comp_list %}		
	   UNION ALL
	  
		  SELECT КодНоменклатуры
			   , КодСклада
  			   , 'НЛМК_Шоп' AS Конкурент
  			   , ЕИ
  			   , CAST(AVG(Цена) AS INT) AS Средняя_цена
  			   , Источник
			FROM [Prices].[Парсинг].[НЛМК_Шоп]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , ЕИ
			   , Источник
		  HAVING CAST(AVG(Цена) AS INT) > 0



															
		{% endif %}
		
		

		
		
	   {% if 'СПК' in parsing.comp_list %}
		UNION ALL	   
	   
		  SELECT КодНоменклатуры
			   , КодСклада
			   , 'СПК' AS Конкурент
			   , 'т' AS ЕИ
			   , CAST(AVG(Цена) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[СПК]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , Источник
		  HAVING CAST(AVG(Цена) AS INT) > 0

															

		{% endif %}

	   {% if 'Мечел-сервис' in parsing.comp_list %}	
	   UNION ALL
	   
		  SELECT КодНоменклатуры
			   , КодСклада
			   , 'Мечел-сервис' AS Конкурент
			   , ЕИ
			   , CAST(AVG(Оптовая_цена) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[Мечел]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , ЕИ
			   , Источник
		  HAVING CAST(AVG(Оптовая_цена) AS INT) > 0

															
		{% endif %}													


	   {% if 'МКМ' in parsing.comp_list %}
	   UNION ALL
		  SELECT КодНоменклатуры
			   , КодСклада
			   , 'МКМ' AS Конкурент
			   , 'т' AS ЕИ
			   , CAST(AVG(COALESCE(Цена_от_3_тн, Цена_от_1_до_3_тн, Цена_до_1_тн, NULL)) AS INT) AS Средняя_цена
			   , Источник
			FROM [Prices].[Парсинг].[Металлкомплект]
		   WHERE Дата BETWEEN {{parsing.per_start}} and {{parsing.per_end}} and [КодСклада] IN (SELECT [КодСклада] FROM [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] WHERE [Подразделение_ЕМИ] = {{podr}})
		GROUP BY КодНоменклатуры
			   , КодСклада
			   , Источник
		HAVING CAST(AVG(COALESCE(Цена_от_3_тн, Цена_от_1_до_3_тн, Цена_до_1_тн, NULL)) AS INT) IS NOT NULL
		{% endif %}		

		) AS Source_table

LEFT JOIN [Prices].[Парсинг].[п_СкладКонкурентаФилиалЕМИ] as wh on Source_table.КодСклада = wh.[КодСклада]
LEFT JOIN [Prices].[Парсинг].[п_НоменклКонкГрупповаяЕМИ] as p_nom on Source_table.[КодНоменклатуры] = p_nom.[КодНоменклатуры]
WHERE p_nom.ГрупповаяНоменклатураЕМИ IN  ( SELECT DISTINCT 
	 [Наименование]
  FROM [PRD_ERP_PBI].[dbo].[ГрупповаяНоменклатура]
  WHERE [ГруппаФинансовогоУчета] = {{gfu}}
  )
GROUP BY wh.[Подразделение_ЕМИ]
		,p_nom.ГрупповаяНоменклатураЕМИ
    
)